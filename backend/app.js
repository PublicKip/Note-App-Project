'use strict'; //no silly javascript errors

//require dependencies
const express = require('express'); //express library performs server functionality for us
const cors = require('cors'); //cors control our app's security
const { MongoClient } = require('mongodb'); //import the client from the mongodb library
require('dotenv').config(); //configure .env usage
const mongoose = require('mongoose');

//create express app
const app = express(); //express app
app.use(cors()); //default cors security enabled - local app calls are allowed, aka Our local frontend can call our local backend
app.use(express.json()); //allows ability to parse incoming JSON 

//define variables
const URI = process.env.ConnectionString; //connection string to local mongodb server
const PORT = process.env.PORT; // port
const client = new MongoClient(URI); //handles db connection

const Note = require('./Schema.js')

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

// FROM ATLAS

// this is the entire GET route, for retrieving notes from Atlas
// this will run when user logs in, userID will be generated(assigned?) by Auth0 and sent to backend(here)

//wrap db calls within a function. 
//This helps keeps the process nice and neat and makes it easier to avoid ongoing/lingering connections
async function getNotes(userID) {
    try {
        await client.connect(); //connect to db
        const database = client.db(userID); //checks for Database named NoteDB
        const collection = database.collection('notes'); //checks for collection within NoteDB with a name equal to userID
        const result = await collection.find().toArray(); //await your async db query and store the result in a variable for use later
        // console.log(result); //log to the console if you want
        return result; //this returns a value when the function is called
    } catch(e) {
        console.error(e);
    } finally {
        await client.close(); //using try, catch, finally is BEST practice.
        //Always close your collection after you've used it. OR ELSE
    }
}

//configure a route to the base url

app.get('/FromAtlas', async (req, res) => {
    let userID = req.query.userID // Obtain userID from request
    try {
        const notes = await getNotes(userID);
        res.json(notes);
        // console.log(notes)
    } catch (error) {
        console.error(error);
        res.status(500).send('Error fetching notes');
    }
});

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// i hope you're having a lovely day :3
// i am thank you :~>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TO ATLAS

// this function should try to go to the Collection named NoteDB
// then the database with a name equal to the userID
// could just take this routing from the function above or figure out how to do it in the URL itself
async function saveNotes(userID, array) {
    try {
        await mongoose.connect(URI + '/' + userID);
        // notes properly save and load now
        // find a way to delete everything deleteMany({}) here
        // await Note.deleteMany({});
        for (let i = 0; i < array.length; i++) {
            const noteObject = array[i];
            const dbNote = new Note({ title: noteObject.title, id: noteObject.id, category: noteObject.category , description: noteObject.description , date: noteObject.date , completed: noteObject.complete });
            await dbNote.save().then(() => console.log('Note ' + noteObject.title + ' saved'))
        };
    }
    catch(e) {
        console.error(e);
        throw e;
    }
    finally {
        mongoose.disconnect();
    }
}

app.post('/ToAtlas', async (req, res) => {
    let userID = req.query.userID;
    let array = req.body;
    console.log(req.body)
  try {
    await saveNotes(userID, array)
    res.send('Notes Saved To Cloud');
  } catch (e) {
    console.log(e);
    res.send('Error Saving Notes'); 
  }
})

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//start the server
app.listen(PORT, ()=> {
    console.log('App running on: '+'http://localhost:'+ PORT);
})